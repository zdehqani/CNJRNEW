---

- name: Copy the luna client installer to server.
  ansible.builtin.copy:
    src: "{{ sourcefiles }}/{{ luna_package_name }}"
    dest: "{{ remote_sourcefiles }}/"
    owner: root
    group: "{{ unix_group }}"
    mode: '0664'

- name: Create a directory to extract the luna client acrhive into
  ansible.builtin.file:
    path:  "{{ lunasa_client_working_dir }}"
    state: directory
    mode: '0775'
    owner: root
    group: "{{ unix_group }}"

- name: Unarchive a Luna client tar file
  ansible.builtin.unarchive:
    src: "{{ remote_sourcefiles }}/{{ luna_package_name }}"
    dest: "{{ lunasa_client_working_dir }}"
    remote_src: yes

- name : Find the path of the extracted luna client folder
  find:
    paths: "{{ lunasa_client_working_dir }}"
    file_type: directory
    recurse: no
  register: output

- name: Set luna client extracted folder path to variable
  no_log: true
  ansible.builtin.set_fact:
    lunasa_client_installer_path: "{{ item.path }}/64/install.sh"
  with_items: "{{ output.files }}"

- name: Run the install.sh script
  ansible.builtin.shell: |
    set -o pipefail  && echo y | {{ lunasa_client_installer_path }} \
      -p network
  args:
    creates: /usr/safenet/lunaclient/lib/libCryptoki2_64.so
  become: true

- name: set client facts for fqdn
  ansible.builtin.set_fact:
    client_name: "{{ ansible_facts['fqdn'] }}"
    client_reg_opt: "-hostname"
    client_host: "{{ ansible_facts['fqdn'] }}"
    client_cert_cn: "{{ inventory_hostname }}"
  when: lunasa_client_ip is undefined

- name: set client facts for IP override
  ansible.builtin.set_fact:
    client_name: "{{ ansible_facts['fqdn'] }}"
    client_reg_opt: "-ip"
    client_host: "{{ lunasa_client_ip }}"
    client_cert_cn: "{{ lunasa_client_ip }}"
  when: lunasa_client_ip is defined

- name: Check for existing client cert
  stat:
    path: "/usr/safenet/lunaclient/cert/client/{{ client_cert_cn }}.pem"
  register: client_cert

- name: Generate a new client cert for NTL
  command: /usr/safenet/lunaclient/bin/vtl createCert -n "{{ client_cert_cn }}"
  become: true
  register: created_cert
  when: not client_cert.stat.exists or lunasa_client_rotate_cert

- name: Note when a new cert is created
  ansible.builtin.set_fact:
    client_new_cert: "{{ created_cert.changed }}"

- name: register the client on each HSM
  include_tasks: register_hsm_client.yml
  vars:
    hsm_hostname: "{{ item.hostname }}"
    hsm_admin_password: "{{ item.admin_password }}"
    hsm_partition: "{{ item.partition }}"
  loop: "{{ lunasa_hsms }}"
  loop_control:
    label: "{{ item.hostname }}"


- name: verify the NTL connection
  command: /usr/safenet/lunaclient/bin/vtl verify
  become: true
  register: vtl_verify

- name: Fail if NTL connection doesn't verify
  ansible.builtin.fail:
    msg: >
      ERROR: 'vtl verify' failed.  This is commonly due to network NAT between
      the client and the HSM.  Try disabling client IP checking in the HSM
  when: "'Error: Unable to find any Luna SA slots/partitions' in vtl_verify.stdout"

- name: create hsm ha partition
  when: lunasa_hsms | length > 1
  become: true
  block:
    # - debug:
    #     msg: "Printing partition serial {{ item.partition_serial }}"
    #   loop: "{{ lunasa_hsms }}"
    #   loop_control:
    #     label: "{{ item.hostname }}"

    - name: create ha partition
      expect:
        command: >
          /usr/safenet/lunaclient/bin/lunacm -c hagroup createGroup
          -label  {{ lunasa_ha_label }}
          -serialNumber {{ lunasa_hsms[0].partition_serial }}
        responses:
          Enter the password: "{{ hsm_partition_pin }}"
          ">": "copy"
      register: result
      no_log: true
      failed_when: 
        - "'Command Result : No Error' not in result.stdout"
        - "'for the new group has already been used' not in result.stdout"


    - name: add other hsms to the ha group
      expect:
        command: >
          /usr/safenet/lunaclient/bin/lunacm -c hagroup addMember
          -group  {{ lunasa_ha_label }}
          -serialNumber {{ item.partition_serial }}
        responses:
          Enter the password: "{{ hsm_partition_pin }}"
          ">": "copy"
      loop: "{{ lunasa_hsms }}"
      loop_control:
        extended: yes
      when: not ansible_loop.first
      no_log: true
      register: result
      failed_when:
        - "'Command Result : No Error' not in result.stdout"
        - "'The member you specified is already part of an' not in result.stdout"

    - name: Check the HA group
      expect:
        command: /usr/safenet/lunaclient/bin/lunacm -c hagroup listgroups
        responses:
          password: "{{ hsm_partition_pin }}"
      register: result
      no_log: true
      failed_when: "'Command Result : No Error' not in result.stdout"

    - name: Register the HA Slot ID
      ansible.builtin.shell: |
        set -o pipefail && echo "{{ result.stdout }}" | grep 'HA Group Slot ID' | awk '{ print $NF }'
      register: slot_result
      no_log: true

    - name: Set HA Slot fact for use by the playbook calling this role
      ansible.builtin.set_fact:
        lunasa_ha_slot: "{{ slot_result.stdout }}"

    - name: Log the HA Slot ID used
      debug:
        var: lunasa_ha_slot

- name: Configure HA Group Settings
  block:
    - name: Enable HA only mode
      ansible.builtin.shell: |
        /usr/safenet/lunaclient/bin/lunacm -c hagroup haonly -enable
      register: result
      failed_when:
        - "'Command Result : No Error' not in result.stdout"
        - "'HA Only has been enabled.' not in result.stdout"

    - name: Set Retry interval to 60 seconds
      ansible.builtin.shell: |
        /usr/safenet/lunaclient/bin/lunacm -c hagroup interval -interval 60
      register: result
      failed_when:
        - "'Command Result : No Error' not in result.stdout"

    - name: Set recoverymode to activeEnhanced
      ansible.builtin.shell: |
        /usr/safenet/lunaclient/bin/lunacm -c hagroup recoverymode -mode activeEnhanced
      register: result
      failed_when:
        - "'Command Result : No Error' not in result.stdout"

    - name: Set Retry attempts to 200
      ansible.builtin.shell: |
        /usr/safenet/lunaclient/bin/lunacm -c hagroup retry -count 200
      register: result
      failed_when:
        - "'Command Result : No Error' not in result.stdout"

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path:  "{{ luna_ha_log_path }}"
        state: directory
    
    - name: Set halog path
      ansible.builtin.shell: |
        /usr/safenet/lunaclient/bin/lunacm -c hagroup halog -path {{ luna_ha_log_path }}
      register: result
      failed_when:
        - "'Command Result : No Error' not in result.stdout"

    - name: Set log size to 500000
      ansible.builtin.shell: |
        /usr/safenet/lunaclient/bin/lunacm -c hagroup halog -maxlength 500000
      register: result
      failed_when:
        - "'Command Result : No Error' not in result.stdout"

    - name: Enable HA Logging
      ansible.builtin.shell: |
        /usr/safenet/lunaclient/bin/lunacm -c hagroup halog -enable
      register: result
      failed_when:
        - "'Command Result : No Error' not in result.stdout"

- name: Create pkcs11.yml file
  ansible.builtin.template:
    src: template/pkcs11.yml.j2
    dest: /apps/conjur/config/pkcs11.yml
    owner: root
    group: root
    mode: '0600'
  no_log: true

- name: Copy "Chrystoki.conf" file to /apps/conjur/config/
  ansible.builtin.copy:
    src: /etc/Chrystoki.conf
    dest: /apps/conjur/config/
    remote_src: yes
